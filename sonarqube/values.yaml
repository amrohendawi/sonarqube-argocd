# SonarQube Community Edition Configuration
# This values.yaml file configures SonarQube CE for production use

# Global configuration
global:
  imageRegistry: ""

# SonarQube configuration
sonarqube:
  # Image configuration
  image:
    repository: sonarqube
    tag: "10.4.1-community"
    pullPolicy: IfNotPresent

  # Edition (community, developer, enterprise)
  edition: "community"

  # Resource configuration
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi

  # JVM Options
  jvmOpts: "-Xmx3G -Xms1G"
  jvmCeOpts: "-Xmx3G -Xms1G"

  # Persistence configuration
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 20Gi
    storageClass: ""

  # Service configuration
  service:
    type: ClusterIP
    externalPort: 9000
    internalPort: 9000

  # Ingress configuration (disabled by default)
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: sonarqube.example.com
        paths:
          - path: /
            pathType: Prefix
    tls: []
      # - secretName: sonarqube-tls
      #   hosts:
      #     - sonarqube.example.com

  # Security context
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true

  # Disable system control init container for non-privileged environments
  initSysctl:
    enabled: false

  # Init containers configuration
  initContainers:
    # Disable privileged init containers for security
    sysctlVmMaxMapCount:
      enabled: false

  # Database configuration
  jdbcOverwrite:
    enable: true
    jdbcUrl: "jdbc:postgresql://sonarqube-postgresql:5432/sonarDB"
    jdbcUsername: "sonarUser"
    jdbcSecretName: "sonarqube-postgresql"
    jdbcSecretPasswordKey: "password"

  # Plugins configuration
  plugins:
    install: []
    # Example plugins:
    # - "https://github.com/mc1arke/sonarqube-community-branch-plugin/releases/download/1.14.0/sonarqube-community-branch-plugin-1.14.0.jar"

  # Admin credentials (use secrets for production)
  account:
    # Use secrets instead of plain text
    adminPasswordSecretName: "sonarqube-admin-secret"
    adminPasswordSecretKey: "admin-password"
    currentAdminPasswordSecretName: "sonarqube-admin-secret"
    currentAdminPasswordSecretKey: "current-admin-password"

  # Elasticsearch configuration
  searchNodes: "1"

  # Startup and liveness probes
  startupProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    failureThreshold: 30
    timeoutSeconds: 5

  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6

  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6

  # Environment variables
  env: []
  # Uncomment and configure if you need the community branch plugin
  # - name: "SONAR_WEB_JAVAADDITIONALOPTS"
  #   value: "-javaagent:./extensions/plugins/sonarqube-community-branch-plugin.jar=web"
  # - name: "SONAR_CE_JAVAADDITIONALOPTS"
  #   value: "-javaagent:./extensions/plugins/sonarqube-community-branch-plugin.jar=ce"

# PostgreSQL configuration (bundled database)
postgresql:
  enabled: true
  
  # Override the name to avoid conflicts with SonarQube naming
  nameOverride: "postgresql"
  fullnameOverride: "sonarqube-postgresql"
  
  # PostgreSQL authentication
  auth:
    postgresPassword: "postgres123"  # Change in production!
    username: "sonarUser"
    password: "sonarPass123"  # Change in production!
    database: "sonarDB"

  # PostgreSQL primary configuration
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: ""
    
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi

  # Service configuration
  service:
    ports:
      postgresql: 5432

# Network Policies (optional, uncomment if needed)
networkPolicy:
  enabled: false

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# ServiceMonitor for Prometheus (if monitoring is needed)
serviceMonitor:
  enabled: false
